module HelloWorld

extern func snprintf(buf *mut byte, size uint, fmt *byte, ...) // [cdecl]
extern func printf(fmt *byte, ...)

/*
type ClosureData class {
	
}

type TestBytes class {
	a, b byte
	c int
}

func testBytes(b bool, r &TestBytes) int {
	return r.b
}

func test(i, j int) int {
	return i + j
}

func testPow(a, b float) float {
	return a ** b
}

func testPowI(a, b int) int {
	return (a ** b) as int
}

func getVal() int {
	return 10
}
*/

func main() double {
	let f float32 = 1
	// let i &int = *(&f as *int)
	let i = f as &int
	printf("f: %f, i: %x", f, i)
	return i
	
	/*
	let mut i = getVal(), mut j = i + 10
	i = j++
	printf("i: %d, j: %d\n", i, j)
	*/
	
	/* for let mut i = 0; i < 10; i++ {
		printf("i: %d\n", i) if i % 2 == 0
		break if i == 7
		// i = i + 1
	} */
	
	/*
	let _i = 0b01010_u16, _j = 0b01101_i16
	let _r = _i | _j
	printf("0x%04X | 0x%04X => 0x%04X\n", _i, _j, _r)
	
	let mut buf [100]byte
	snprintf(buf, sizeof buf, "test: 0x%04X, %d, %f, %d", 0x1234, 9876, 123.456_f32, 123)
	printf("buf: %s\n", buf)
	*/
	
	/*
	let mut b = true
	
	let mut a1 = 2.0_f32
	let a2 = 3.0_f32
	let a3 = 5.0_f32
	
	// printf("Hello World!\n")
	
	if a1 > a2 {
		return a1 ** a2 // 8
	}elseif a2 > a3 {
		return a1 ** a3 // 32
	}elseif false {
		return a2 ** a3 // 243
	}else{
		b = true
	}
	
	let a4 = testPow(a1, a2)
	printf("testPow(%f, %f): %f\n", a1, a2, a4)
	// return a1

	let b1 = 5
	let b2 = 2
	let b4 = testPowI(b1, b2)
	printf("testPowI(%d, %d): %d\n", b1, b2, b4)
	
	let mut jj = test(100000, 80000)
	
	// let ff func(i, j int)int = test
	let ff = test
	jj = ff(400000, 30000)
	return jj
	*/

	/*
	type Test class {
		a, b int
		c TestBytes
	}
	*/
	
	/*
	let s &Test = *(null as *Test)
	printf("Addr: %p", &s)
	
	let mut t // = Test{b: 700}
	// t.c.b = 10
	// t.c.c = t.GetA()
	// t.b = 500
	
	t = Test{a:400, b:700}
	// let b_false = func()bool{ return false; }
	// let b_true = func()bool{ return true; }
	let str = "Hello\x20World: %d, t.b: %d\n"
	printf(str, 123, t.b)
	return t.a
	*/
	
	/*
	let _bool bool = 1.2 != 0
	let b_false = {||false}
	let b_true = {||true}
	let b_res = b_true() && b_false()
	if b_res {
		return b_res // testBytes(b_res, t.c)
	}
	return 123
	*/
	
	/*
	let mut t = Test{300, 600, TestBytes{1, 2, 3}}
	let mut test &Test = t
	let mut r &TestBytes = *&*&test.c
	if true {
		printf("TestBytes.b: %d\n", r.b as int)
		r.b = 10
		// return r.b
	}
	
	let p = &t.c
	if true {
		return p.b
	}
	return r.b
	*/
	
	/*
	type a [10]byte
	let mut i = sizeof a[2]
	i = sizeof t
	i = sizeof Test
	i = sizeof t.c.c
	i = sizeof Test.a
	i = 10i8 + 8u16
	
	// let k
	let j = i + 2.5 + t.b
	
	let f = func(i float) ? {
		return i
	}
	
	func getArr() ? {
		let arr [6]int32
		arr[1] = 1000
		return arr
	}
	
	let arr [10][6]int32
	arr[5] = getArr()
	
	let arr2 = arr
	
	let k = 5
	return (arr2[k][1] + j + f(3) + jj) ** 0.5
	*/
}
