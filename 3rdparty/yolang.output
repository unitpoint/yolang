Terminals unused in grammar

   T_ELLIPSIS
   T_VAR
   T_CONST
   T_STRUCT
   T_CLASS
   ','
   "**= (T_POW_ASSIGN)"
   ">>= (T_RSH_ASSIGN)"
   "<<= (T_LSH_ASSIGN)"
   "^= (T_XOR_ASSIGN)"
   "|= (T_OR_ASSIGN)"
   "&= (T_AND_ASSIGN)"
   "%= (T_MOD_ASSIGN)"
   "..= (T_CONCAT_ASSIGN)"
   "/= (T_DIV_ASSIGN)"
   "*= (T_MUL_ASSIGN)"
   "-= (T_MINUS_ASSIGN)"
   "+= (T_PLUS_ASSIGN)"
   '?'
   ':'
   "^^ (T_XORXOR)"
   "|| (T_OROR)"
   "&& (T_ANDAND)"
   "> (T_GT)"
   "< (T_LT)"
   ">= (T_GE)"
   "<= (T_LE)"
   "!= (T_NE)"
   "== (T_EQ)"
   ".. (T_CONCAT)"
   "^ (T_XOR)"
   "| (T_OR)"
   ">> (T_RSH)"
   "<< (T_LSH)"
   "& (T_AND)"
   "** (T_POW)"
   "is (T_IS)"
   "-- (T_DEC)"
   "++ (T_INC)"


Grammar

    0 $accept: file $end

    1 file: statement_list

    2 statement_list: statement_list statement
    3               | /* empty */

    4 statement: T_NAME "= (T_ASSIGN)" expr end_statement
    5          | type T_NAME end_statement
    6          | type T_NAME "= (T_ASSIGN)" expr end_statement

    7 type: type_name
    8     | type_name "* (T_MUL)"
    9     | type_name T_SLICE
   10     | type_name '[' T_LNUMBER ']'

   11 type_name: std_type_name
   12          | T_NAME
   13          | T_NAME ". (T_DOT)" T_NAME

   14 std_type_name: T_INT8
   15              | T_INT16
   16              | T_INT32
   17              | T_INT64
   18              | T_UINT8
   19              | T_UINT16
   20              | T_UINT32
   21              | T_UINT64
   22              | T_UINTPTR
   23              | T_STRING
   24              | T_FLOAT32
   25              | T_FLOAT64
   26              | T_BOOL
   27              | T_VOID

   28 end_statement: T_NEWLINE
   29              | ';'
   30              | /* empty */

   31 expr: T_TRUE
   32     | T_FALSE
   33     | T_NULL
   34     | T_LNUMBER
   35     | T_DNUMBER
   36     | T_NAME
   37     | uexpr
   38     | expr "+ (T_PLUS)" expr
   39     | expr "- (T_MINUS)" expr
   40     | expr "* (T_MUL)" expr
   41     | expr "/ (T_DIV)" expr
   42     | expr "% (T_MOD)" expr
   43     | '(' expr ')'

   44 $@1: /* empty */

   45 uexpr: "+ (T_PLUS)" $@1 expr

   46 $@2: /* empty */

   47 uexpr: "- (T_MINUS)" $@2 expr

   48 $@3: /* empty */

   49 uexpr: "! (T_NOT)" $@3 expr

   50 $@4: /* empty */

   51 uexpr: "~ (T_TILDE)" $@4 expr

   52 $@5: /* empty */

   53 uexpr: "@ (T_AT)" $@5 expr

   54 $@6: /* empty */

   55 uexpr: "* (T_INDIRECT)" $@6 expr

   56 $@7: /* empty */

   57 uexpr: "& (T_ADDR)" $@7 expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 43
')' (41) 43
',' (44)
':' (58)
';' (59) 29
'?' (63)
'[' (91) 10
']' (93) 10
error (256)
T_ELLIPSIS (258)
T_INT8 (259) 14
T_INT16 (260) 15
T_INT32 (261) 16
T_INT64 (262) 17
T_UINT8 (263) 18
T_UINT16 (264) 19
T_UINT32 (265) 20
T_UINT64 (266) 21
T_UINTPTR (267) 22
T_FLOAT32 (268) 24
T_FLOAT64 (269) 25
T_STRING (270) 23
T_BOOL (271) 26
T_TRUE (272) 31
T_FALSE (273) 32
T_NULL (274) 33
T_VOID (275) 27
T_VAR (276)
T_CONST (277)
T_STRUCT (278)
T_CLASS (279)
T_LNUMBER (280) 10 34
T_DNUMBER (281) 35
T_NAME (282) 4 5 6 12 13 36
T_NEWLINE (283) 28
T_SLICE (284) 9
"**= (T_POW_ASSIGN)" (285)
">>= (T_RSH_ASSIGN)" (286)
"<<= (T_LSH_ASSIGN)" (287)
"^= (T_XOR_ASSIGN)" (288)
"|= (T_OR_ASSIGN)" (289)
"&= (T_AND_ASSIGN)" (290)
"%= (T_MOD_ASSIGN)" (291)
"..= (T_CONCAT_ASSIGN)" (292)
"/= (T_DIV_ASSIGN)" (293)
"*= (T_MUL_ASSIGN)" (294)
"-= (T_MINUS_ASSIGN)" (295)
"+= (T_PLUS_ASSIGN)" (296)
"= (T_ASSIGN)" (297) 4 6
"^^ (T_XORXOR)" (298)
"|| (T_OROR)" (299)
"&& (T_ANDAND)" (300)
"> (T_GT)" (301)
"< (T_LT)" (302)
">= (T_GE)" (303)
"<= (T_LE)" (304)
"!= (T_NE)" (305)
"== (T_EQ)" (306)
".. (T_CONCAT)" (307)
"^ (T_XOR)" (308)
"| (T_OR)" (309)
"- (T_MINUS)" (310) 39 47
"+ (T_PLUS)" (311) 38 45
">> (T_RSH)" (312)
"<< (T_LSH)" (313)
"& (T_AND)" (314)
"% (T_MOD)" (315) 42
"/ (T_DIV)" (316) 41
"* (T_MUL)" (317) 8 40
"** (T_POW)" (318)
"is (T_IS)" (319)
T_UNARY (320)
"-- (T_DEC)" (321)
"++ (T_INC)" (322)
"@ (T_AT)" (323) 53
"~ (T_TILDE)" (324) 51
"! (T_NOT)" (325) 49
". (T_DOT)" (326) 13
"* (T_INDIRECT)" (327) 55
"& (T_ADDR)" (328) 57


Nonterminals, with rules where they appear

$accept (82)
    on left: 0
file (83)
    on left: 1, on right: 0
statement_list (84)
    on left: 2 3, on right: 1 2
statement (85)
    on left: 4 5 6, on right: 2
type (86)
    on left: 7 8 9 10, on right: 5 6
type_name (87)
    on left: 11 12 13, on right: 7 8 9 10
std_type_name (88)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right: 11
end_statement (89)
    on left: 28 29 30, on right: 4 5 6
expr (90)
    on left: 31 32 33 34 35 36 37 38 39 40 41 42 43, on right: 4 6
    38 39 40 41 42 43 45 47 49 51 53 55 57
uexpr (91)
    on left: 45 47 49 51 53 55 57, on right: 37
$@1 (92)
    on left: 44, on right: 45
$@2 (93)
    on left: 46, on right: 47
$@3 (94)
    on left: 48, on right: 49
$@4 (95)
    on left: 50, on right: 51
$@5 (96)
    on left: 52, on right: 53
$@6 (97)
    on left: 54, on right: 55
$@7 (98)
    on left: 56, on right: 57


State 0

    0 $accept: . file $end

    $default  reduce using rule 3 (statement_list)

    file            go to state 1
    statement_list  go to state 2


State 1

    0 $accept: file . $end

    $end  shift, and go to state 3


State 2

    1 file: statement_list .
    2 statement_list: statement_list . statement

    T_INT8     shift, and go to state 4
    T_INT16    shift, and go to state 5
    T_INT32    shift, and go to state 6
    T_INT64    shift, and go to state 7
    T_UINT8    shift, and go to state 8
    T_UINT16   shift, and go to state 9
    T_UINT32   shift, and go to state 10
    T_UINT64   shift, and go to state 11
    T_UINTPTR  shift, and go to state 12
    T_FLOAT32  shift, and go to state 13
    T_FLOAT64  shift, and go to state 14
    T_STRING   shift, and go to state 15
    T_BOOL     shift, and go to state 16
    T_VOID     shift, and go to state 17
    T_NAME     shift, and go to state 18

    $default  reduce using rule 1 (file)

    statement      go to state 19
    type           go to state 20
    type_name      go to state 21
    std_type_name  go to state 22


State 3

    0 $accept: file $end .

    $default  accept


State 4

   14 std_type_name: T_INT8 .

    $default  reduce using rule 14 (std_type_name)


State 5

   15 std_type_name: T_INT16 .

    $default  reduce using rule 15 (std_type_name)


State 6

   16 std_type_name: T_INT32 .

    $default  reduce using rule 16 (std_type_name)


State 7

   17 std_type_name: T_INT64 .

    $default  reduce using rule 17 (std_type_name)


State 8

   18 std_type_name: T_UINT8 .

    $default  reduce using rule 18 (std_type_name)


State 9

   19 std_type_name: T_UINT16 .

    $default  reduce using rule 19 (std_type_name)


State 10

   20 std_type_name: T_UINT32 .

    $default  reduce using rule 20 (std_type_name)


State 11

   21 std_type_name: T_UINT64 .

    $default  reduce using rule 21 (std_type_name)


State 12

   22 std_type_name: T_UINTPTR .

    $default  reduce using rule 22 (std_type_name)


State 13

   24 std_type_name: T_FLOAT32 .

    $default  reduce using rule 24 (std_type_name)


State 14

   25 std_type_name: T_FLOAT64 .

    $default  reduce using rule 25 (std_type_name)


State 15

   23 std_type_name: T_STRING .

    $default  reduce using rule 23 (std_type_name)


State 16

   26 std_type_name: T_BOOL .

    $default  reduce using rule 26 (std_type_name)


State 17

   27 std_type_name: T_VOID .

    $default  reduce using rule 27 (std_type_name)


State 18

    4 statement: T_NAME . "= (T_ASSIGN)" expr end_statement
   12 type_name: T_NAME .
   13          | T_NAME . ". (T_DOT)" T_NAME

    "= (T_ASSIGN)"  shift, and go to state 23
    ". (T_DOT)"     shift, and go to state 24

    $default  reduce using rule 12 (type_name)


State 19

    2 statement_list: statement_list statement .

    $default  reduce using rule 2 (statement_list)


State 20

    5 statement: type . T_NAME end_statement
    6          | type . T_NAME "= (T_ASSIGN)" expr end_statement

    T_NAME  shift, and go to state 25


State 21

    7 type: type_name .
    8     | type_name . "* (T_MUL)"
    9     | type_name . T_SLICE
   10     | type_name . '[' T_LNUMBER ']'

    T_SLICE      shift, and go to state 26
    "* (T_MUL)"  shift, and go to state 27
    '['          shift, and go to state 28

    $default  reduce using rule 7 (type)


State 22

   11 type_name: std_type_name .

    $default  reduce using rule 11 (type_name)


State 23

    4 statement: T_NAME "= (T_ASSIGN)" . expr end_statement

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 43
    uexpr  go to state 44


State 24

   13 type_name: T_NAME ". (T_DOT)" . T_NAME

    T_NAME  shift, and go to state 45


State 25

    5 statement: type T_NAME . end_statement
    6          | type T_NAME . "= (T_ASSIGN)" expr end_statement

    T_NEWLINE       shift, and go to state 46
    "= (T_ASSIGN)"  shift, and go to state 47
    ';'             shift, and go to state 48

    $default  reduce using rule 30 (end_statement)

    end_statement  go to state 49


State 26

    9 type: type_name T_SLICE .

    $default  reduce using rule 9 (type)


State 27

    8 type: type_name "* (T_MUL)" .

    $default  reduce using rule 8 (type)


State 28

   10 type: type_name '[' . T_LNUMBER ']'

    T_LNUMBER  shift, and go to state 50


State 29

   31 expr: T_TRUE .

    $default  reduce using rule 31 (expr)


State 30

   32 expr: T_FALSE .

    $default  reduce using rule 32 (expr)


State 31

   33 expr: T_NULL .

    $default  reduce using rule 33 (expr)


State 32

   34 expr: T_LNUMBER .

    $default  reduce using rule 34 (expr)


State 33

   35 expr: T_DNUMBER .

    $default  reduce using rule 35 (expr)


State 34

   36 expr: T_NAME .

    $default  reduce using rule 36 (expr)


State 35

   47 uexpr: "- (T_MINUS)" . $@2 expr

    $default  reduce using rule 46 ($@2)

    $@2  go to state 51


State 36

   45 uexpr: "+ (T_PLUS)" . $@1 expr

    $default  reduce using rule 44 ($@1)

    $@1  go to state 52


State 37

   53 uexpr: "@ (T_AT)" . $@5 expr

    $default  reduce using rule 52 ($@5)

    $@5  go to state 53


State 38

   51 uexpr: "~ (T_TILDE)" . $@4 expr

    $default  reduce using rule 50 ($@4)

    $@4  go to state 54


State 39

   49 uexpr: "! (T_NOT)" . $@3 expr

    $default  reduce using rule 48 ($@3)

    $@3  go to state 55


State 40

   55 uexpr: "* (T_INDIRECT)" . $@6 expr

    $default  reduce using rule 54 ($@6)

    $@6  go to state 56


State 41

   57 uexpr: "& (T_ADDR)" . $@7 expr

    $default  reduce using rule 56 ($@7)

    $@7  go to state 57


State 42

   43 expr: '(' . expr ')'

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 58
    uexpr  go to state 44


State 43

    4 statement: T_NAME "= (T_ASSIGN)" expr . end_statement
   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr

    T_NEWLINE      shift, and go to state 46
    "- (T_MINUS)"  shift, and go to state 59
    "+ (T_PLUS)"   shift, and go to state 60
    "% (T_MOD)"    shift, and go to state 61
    "/ (T_DIV)"    shift, and go to state 62
    "* (T_MUL)"    shift, and go to state 63
    ';'            shift, and go to state 48

    $default  reduce using rule 30 (end_statement)

    end_statement  go to state 64


State 44

   37 expr: uexpr .

    $default  reduce using rule 37 (expr)


State 45

   13 type_name: T_NAME ". (T_DOT)" T_NAME .

    $default  reduce using rule 13 (type_name)


State 46

   28 end_statement: T_NEWLINE .

    $default  reduce using rule 28 (end_statement)


State 47

    6 statement: type T_NAME "= (T_ASSIGN)" . expr end_statement

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 65
    uexpr  go to state 44


State 48

   29 end_statement: ';' .

    $default  reduce using rule 29 (end_statement)


State 49

    5 statement: type T_NAME end_statement .

    $default  reduce using rule 5 (statement)


State 50

   10 type: type_name '[' T_LNUMBER . ']'

    ']'  shift, and go to state 66


State 51

   47 uexpr: "- (T_MINUS)" $@2 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 67
    uexpr  go to state 44


State 52

   45 uexpr: "+ (T_PLUS)" $@1 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 68
    uexpr  go to state 44


State 53

   53 uexpr: "@ (T_AT)" $@5 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 69
    uexpr  go to state 44


State 54

   51 uexpr: "~ (T_TILDE)" $@4 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 70
    uexpr  go to state 44


State 55

   49 uexpr: "! (T_NOT)" $@3 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 71
    uexpr  go to state 44


State 56

   55 uexpr: "* (T_INDIRECT)" $@6 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 72
    uexpr  go to state 44


State 57

   57 uexpr: "& (T_ADDR)" $@7 . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 73
    uexpr  go to state 44


State 58

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   43     | '(' expr . ')'

    "- (T_MINUS)"  shift, and go to state 59
    "+ (T_PLUS)"   shift, and go to state 60
    "% (T_MOD)"    shift, and go to state 61
    "/ (T_DIV)"    shift, and go to state 62
    "* (T_MUL)"    shift, and go to state 63
    ')'            shift, and go to state 74


State 59

   39 expr: expr "- (T_MINUS)" . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 75
    uexpr  go to state 44


State 60

   38 expr: expr "+ (T_PLUS)" . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 76
    uexpr  go to state 44


State 61

   42 expr: expr "% (T_MOD)" . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 77
    uexpr  go to state 44


State 62

   41 expr: expr "/ (T_DIV)" . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 78
    uexpr  go to state 44


State 63

   40 expr: expr "* (T_MUL)" . expr

    T_TRUE            shift, and go to state 29
    T_FALSE           shift, and go to state 30
    T_NULL            shift, and go to state 31
    T_LNUMBER         shift, and go to state 32
    T_DNUMBER         shift, and go to state 33
    T_NAME            shift, and go to state 34
    "- (T_MINUS)"     shift, and go to state 35
    "+ (T_PLUS)"      shift, and go to state 36
    "@ (T_AT)"        shift, and go to state 37
    "~ (T_TILDE)"     shift, and go to state 38
    "! (T_NOT)"       shift, and go to state 39
    "* (T_INDIRECT)"  shift, and go to state 40
    "& (T_ADDR)"      shift, and go to state 41
    '('               shift, and go to state 42

    expr   go to state 79
    uexpr  go to state 44


State 64

    4 statement: T_NAME "= (T_ASSIGN)" expr end_statement .

    $default  reduce using rule 4 (statement)


State 65

    6 statement: type T_NAME "= (T_ASSIGN)" expr . end_statement
   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr

    T_NEWLINE      shift, and go to state 46
    "- (T_MINUS)"  shift, and go to state 59
    "+ (T_PLUS)"   shift, and go to state 60
    "% (T_MOD)"    shift, and go to state 61
    "/ (T_DIV)"    shift, and go to state 62
    "* (T_MUL)"    shift, and go to state 63
    ';'            shift, and go to state 48

    $default  reduce using rule 30 (end_statement)

    end_statement  go to state 80


State 66

   10 type: type_name '[' T_LNUMBER ']' .

    $default  reduce using rule 10 (type)


State 67

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   47 uexpr: "- (T_MINUS)" $@2 expr .

    $default  reduce using rule 47 (uexpr)


State 68

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   45 uexpr: "+ (T_PLUS)" $@1 expr .

    $default  reduce using rule 45 (uexpr)


State 69

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   53 uexpr: "@ (T_AT)" $@5 expr .

    $default  reduce using rule 53 (uexpr)


State 70

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   51 uexpr: "~ (T_TILDE)" $@4 expr .

    $default  reduce using rule 51 (uexpr)


State 71

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   49 uexpr: "! (T_NOT)" $@3 expr .

    $default  reduce using rule 49 (uexpr)


State 72

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   55 uexpr: "* (T_INDIRECT)" $@6 expr .

    $default  reduce using rule 55 (uexpr)


State 73

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   57 uexpr: "& (T_ADDR)" $@7 expr .

    $default  reduce using rule 57 (uexpr)


State 74

   43 expr: '(' expr ')' .

    $default  reduce using rule 43 (expr)


State 75

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   39     | expr "- (T_MINUS)" expr .
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr

    "% (T_MOD)"  shift, and go to state 61
    "/ (T_DIV)"  shift, and go to state 62
    "* (T_MUL)"  shift, and go to state 63

    $default  reduce using rule 39 (expr)


State 76

   38 expr: expr . "+ (T_PLUS)" expr
   38     | expr "+ (T_PLUS)" expr .
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr

    "% (T_MOD)"  shift, and go to state 61
    "/ (T_DIV)"  shift, and go to state 62
    "* (T_MUL)"  shift, and go to state 63

    $default  reduce using rule 38 (expr)


State 77

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr
   42     | expr "% (T_MOD)" expr .

    $default  reduce using rule 42 (expr)


State 78

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   41     | expr . "/ (T_DIV)" expr
   41     | expr "/ (T_DIV)" expr .
   42     | expr . "% (T_MOD)" expr

    $default  reduce using rule 41 (expr)


State 79

   38 expr: expr . "+ (T_PLUS)" expr
   39     | expr . "- (T_MINUS)" expr
   40     | expr . "* (T_MUL)" expr
   40     | expr "* (T_MUL)" expr .
   41     | expr . "/ (T_DIV)" expr
   42     | expr . "% (T_MOD)" expr

    $default  reduce using rule 40 (expr)


State 80

    6 statement: type T_NAME "= (T_ASSIGN)" expr end_statement .

    $default  reduce using rule 6 (statement)
