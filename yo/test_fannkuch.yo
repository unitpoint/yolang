mod test

/*
type Array class<T> {
	capacity uint
	size uint
	buf *T
}

func (a &Array<T>) Init() {
	
}

func (a &Array<T>) Push(elem &T) {
	if a.size+1 > a.capacity {
		a.Reserve(a.size+1)
	}
	a.buf[a.size++] = elem.clone()
}

func (a &Array<T>) Realloc(n uint) {
	let newBuf = new T[n]
	let size = n < a.size ? n : a.size
	for let i = 0; i < size; i++ {
		newBuf[i] = buf[i].clone()
	}
}
*/

extern func printf(fmt *byte, ...)

type Fres class {
	sum, maxflips int
}

func fannkuch(n int) Fres {
  let sign mut = 1, maxflips mut = 0, sum mut = 0
  // let sign, maxflips, sum mut = 1, 0, 0
  // mut sign = 1, maxflips = 0, sum = 0
  
  type buffer mut [100]int
  let p buffer, q buffer, s buffer
  if n > sizeof p / sizeof p[0] {
	printf("error num: %d\n", n)
	return Fres{-1, -1}
  }
  for let i mut = 1; i <= n; i++ { p[i] = q[i] = s[i] = i; }
  loop {
    // Copy and flip.
    let q1 mut = p[1]				// Cache 1st element.
    if q1 != 1 {
      for let i mut = 2; i <= n; i++ { q[i] = p[i]; }		// Work on a copy.
      let flips mut = 1
      loop {
		let qq = q[q1]
		if qq == 1 {				// ... until 1st element is 1.
		  sum += sign * flips
		  maxflips = flips if flips > maxflips // New maximum?
		  break
		}
		q[q1] = q1
		if q1 >= 4 {
		  let i mut = 2, j mut = q1 - 1
		  loop { let tmp = q[i]; q[i] = q[j]; q[j] = tmp; break if ++i >= --j; }
		}
		q1 = qq; flips++
      }
    }
    // Permute.
    if sign == 1 {
      let tmp = p[2]; p[2] = p[1]; p[1] = tmp; sign = -1	// Rotate 1<-2.
    } else {
      let tmp = p[2]; p[2] = p[3]; p[3] = tmp; sign = 1	// Rotate 1<-2 and 1<-2<-3.
      for let i mut = 3; ; i++ {
		// print "mark 4"
		let sx = s[i]
		if sx != 1 { s[i] = sx-1; break; }
		return Fres{sum, maxflips} if i == n // Out of permutations.
		s[i] = i
		// Rotate 1<-...<-i+1.
		let t = p[1]
		for let j mut = 1; j <= i; j++ { p[j] = p[j+1]; }
		p[i+1] = t
      }
    }
  }
  return Fres{-1, -1}
}

func main() double {
	let i = 10
	printf("-: %d\n", -i)
	printf("+: %d\n", +i)
	printf("~: %d, 0x%x\n", ~i, ~i)
	printf("!: %d\n", !(i != 0))
	
	let n = 10
	let r = fannkuch(n)
	// let mut r1 int, mut r2 int
	// let r = fannkuch(4, r1, r2)
	printf("=======================\n%d\nfannkuch(%d): %d\n", r.sum, n, r.maxflips)
	// printf("r1: %d, r2: %d\n", r1, r2)
	return r.sum
}

/*
function getTimeSec(){
 	var d = new Date();
	return (d.getTime() + d.getMilliseconds() / 1000.0) / 1000.0;
}

var n = 10;
var start_time = getTimeSec();
var r = fannkuch(n);
var sum = r[0], flips = r[1];
WScript.Echo(
	sum,"\n", 
	"Pfannkuchen(",n,") = ",flips,"\n",
	"time = ",(getTimeSec() - start_time),"\n"
)
*/
