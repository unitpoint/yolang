/* Generated by re2c 0.13.5 on Thu Jul 30 14:28:56 2015 */
#include "yoparser.h"

// #define YYPARSE_PARAM parm
// #define YYLEX_PARAM parm

// #define YY_DECL int yolex(YYSTYPE *lvalp)

#ifdef YYDEBUG
#undef YYDEBUG
#endif

#if 1
# define YYDEBUG(s, c) printf("state: %d char: %c\n", s, c)
#else
# define YYDEBUG(s, c)
#endif

// #include "yolang-y.h"

#define YYCTYPE   unsigned char
#define YYFILL(n) { if ((YYCURSOR + n) >= (YYLIMIT + YO_LEX_LEN_AHEAD)) { return 0; } }
#define YYCURSOR  parser->cursor
#define YYLIMIT   parser->limit
#define YYMARKER  parser->marker

#if 0
#define YYGETSTATE()  parser->state
#define YYSETSTATE(s) parser->state = s
#define yych		 parser->ch
#define yyaccept	 parser->accept
#endif

#define YYGETCONDITION()  parser->condition
#define YYSETCONDITION(c) parser->condition = c

#define STATE(name)  YO_##name

/* emulate flex constructs */
#define BEGIN(state) YYSETSTATE(STATE(state))
#define YYSTATE      YYGETSTATE()
#define yytext       parser->text
#define yyleng       parser->textLen
#define yyless(x)    do { YYCURSOR = (YYCTYPE*)yytext + x; yyleng = (int)x; } while(0)
#define yymore()     goto yymore_restart

/* perform sanity check. If this message is triggered you should
   increase the YO_LEX_LEN_AHEAD value in the zend_streams.h file */
#define YYMAXFILL 8
#if YO_LEX_LEN_AHEAD < YYMAXFILL
# error YO_LEX_LEN_AHEAD should be greater than or equal to YYMAXFILL
#endif 

extern int yoLexDec(void*, YYSTYPE*);
extern int yoLexBin(void*, YYSTYPE*);
extern int yoLexHex(void*, YYSTYPE*);
extern int yoLexFloat(void*, YYSTYPE*);
extern int yoLexName(void*, YYSTYPE*);
extern int yoLexChar(void*, YYSTYPE*);

int yolex(YYSTYPE * parserNode, void * parm)
{
	YoParserParams * parser = (YoParserParams*)parm;
	// YYMARKER = YYCURSOR;
	
restart:
	yytext = YYCURSOR;

// yymore_restart:

	// -f option
	// YYCTYPE yych;
	// unsigned int yyaccept = 0;
	

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	goto yyc_ST_IN_YOLANG;
/* *********************************** */
yyc_ST_IN_YOLANG:
	{
		static const unsigned char yybm[] = {
			  0,   0,   0,   0,   0,   0,   0,   0, 
			  0, 128,   0,   0,   0,   0,   0,   0, 
			  0,   0,   0,   0,   0,   0,   0,   0, 
			  0,   0,   0,   0,   0,   0,   0,   0, 
			128,   0,   0,   0,   0,   0,   0,   0, 
			  0,   0,   0,   0,   0,   0,   0,   0, 
			120, 120, 104, 104, 104, 104, 104, 104, 
			104, 104,   0,   0,   0,   0,   0,   0, 
			  0,  96,  96,  96,  96,  96,  96,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,   0,   0,   0,   0,  64, 
			  0,  96,  96,  96,  96,  96,  96,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,   0,   0,   0,   0,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
			 64,  64,  64,  64,  64,  64,  64,  64, 
		};

		YYFILL(8);
		yych = *YYCURSOR;
		switch (yych) {
		case 0x00:
		case 0x01:
		case 0x02:
		case 0x03:
		case 0x04:
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case '\v':
		case '\f':
		case 0x0E:
		case 0x0F:
		case 0x10:
		case 0x11:
		case 0x12:
		case 0x13:
		case 0x14:
		case 0x15:
		case 0x16:
		case 0x17:
		case 0x18:
		case 0x19:
		case 0x1A:
		case 0x1B:
		case 0x1C:
		case 0x1D:
		case 0x1E:
		case 0x1F:
		case '"':
		case '#':
		case '$':
		case '\'':
		case '(':
		case ')':
		case ',':
		case ':':
		case ';':
		case '?':
		case '@':
		case '\\':
		case ']':
		case '`':
		case '{':
		case '}':
		case '~':	goto yy48;
		case '\t':
		case ' ':	goto yy28;
		case '\n':	goto yy30;
		case '\r':	goto yy32;
		case '!':	goto yy22;
		case '%':	goto yy12;
		case '&':	goto yy18;
		case '*':	goto yy8;
		case '+':	goto yy4;
		case '-':	goto yy6;
		case '.':	goto yy2;
		case '/':	goto yy10;
		case '0':	goto yy45;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy47;
		case '<':	goto yy24;
		case '=':	goto yy14;
		case '>':	goto yy26;
		case '[':	goto yy33;
		case '^':	goto yy20;
		case 'b':	goto yy36;
		case 'c':	goto yy34;
		case 'f':	goto yy39;
		case 'i':	goto yy37;
		case 'n':	goto yy42;
		case 's':	goto yy40;
		case 't':	goto yy41;
		case 'u':	goto yy38;
		case 'v':	goto yy43;
		case '|':	goto yy16;
		default:	goto yy44;
		}
yy2:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '.') goto yy197;
		if (yych <= '/') goto yy3;
		if (yych <= '9') goto yy195;
yy3:
		yyleng = YYCURSOR - yytext;
		{ return T_DOT; }
yy4:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy193;
		yyleng = YYCURSOR - yytext;
		{ return T_PLUS; }
yy6:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy191;
		yyleng = YYCURSOR - yytext;
		{ return T_MINUS; }
yy8:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '*') goto yy185;
		if (yych == '=') goto yy187;
		yyleng = YYCURSOR - yytext;
		{ return T_MUL; }
yy10:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy183;
		yyleng = YYCURSOR - yytext;
		{ return T_DIV; }
yy12:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy181;
		yyleng = YYCURSOR - yytext;
		{ return T_MOD; }
yy14:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy179;
		yyleng = YYCURSOR - yytext;
		{ return T_ASSIGN; }
yy16:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '|') goto yy177;
		yyleng = YYCURSOR - yytext;
		{ return T_OR; }
yy18:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '&') goto yy175;
		yyleng = YYCURSOR - yytext;
		{ return T_AND; }
yy20:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '^') goto yy173;
		yyleng = YYCURSOR - yytext;
		{ return T_XOR; }
yy22:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy171;
yy23:
		yyleng = YYCURSOR - yytext;
		{ return yoLexChar(parser, parserNode); }
yy24:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy169;
		yyleng = YYCURSOR - yytext;
		{ return T_LT; }
yy26:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy167;
		yyleng = YYCURSOR - yytext;
		{ return T_GT; }
yy28:
		++YYCURSOR;
		yych = *YYCURSOR;
		goto yy166;
yy29:
		yyleng = YYCURSOR - yytext;
		{ goto restart; }
yy30:
		++YYCURSOR;
yy31:
		yyleng = YYCURSOR - yytext;
		{ return T_NEWLINE; }
yy32:
		yych = *++YYCURSOR;
		if (yych == '\n') goto yy164;
		goto yy31;
yy33:
		yych = *++YYCURSOR;
		if (yych == ']') goto yy162;
		goto yy23;
yy34:
		++YYCURSOR;
		if ((yych = *YYCURSOR) <= 'k') {
			if (yych == 'h') goto yy148;
			goto yy68;
		} else {
			if (yych <= 'l') goto yy149;
			if (yych == 'o') goto yy150;
			goto yy68;
		}
yy35:
		yyleng = YYCURSOR - yytext;
		{ return yoLexName(parser, parserNode); }
yy36:
		yych = *++YYCURSOR;
		if (yych == 'o') goto yy140;
		if (yych == 'y') goto yy141;
		goto yy68;
yy37:
		yych = *++YYCURSOR;
		if (yych == 'n') goto yy127;
		goto yy68;
yy38:
		yych = *++YYCURSOR;
		if (yych == 'i') goto yy109;
		goto yy68;
yy39:
		yych = *++YYCURSOR;
		if (yych == 'a') goto yy94;
		if (yych == 'l') goto yy95;
		goto yy68;
yy40:
		yych = *++YYCURSOR;
		if (yych == 't') goto yy84;
		goto yy68;
yy41:
		yych = *++YYCURSOR;
		if (yych == 'r') goto yy80;
		goto yy68;
yy42:
		yych = *++YYCURSOR;
		if (yych == 'u') goto yy76;
		goto yy68;
yy43:
		yych = *++YYCURSOR;
		if (yych == 'a') goto yy69;
		if (yych == 'o') goto yy70;
		goto yy68;
yy44:
		yych = *++YYCURSOR;
		goto yy68;
yy45:
		yyaccept = 0;
		yych = *(YYMARKER = ++YYCURSOR);
		if (yych <= 'E') {
			if (yych <= '/') {
				if (yych == '.') goto yy49;
			} else {
				if (yych <= '9') goto yy52;
				if (yych >= 'E') goto yy54;
			}
		} else {
			if (yych <= 'd') {
				if (yych == 'b') goto yy60;
			} else {
				if (yych <= 'e') goto yy54;
				if (yych == 'x') goto yy59;
			}
		}
yy46:
		yyleng = YYCURSOR - yytext;
		{ return yoLexDec(parser, parserNode); }
yy47:
		yyaccept = 0;
		yych = *(YYMARKER = ++YYCURSOR);
		if (yych <= '9') {
			if (yych == '.') goto yy49;
			if (yych <= '/') goto yy46;
			goto yy52;
		} else {
			if (yych <= 'E') {
				if (yych <= 'D') goto yy46;
				goto yy54;
			} else {
				if (yych == 'e') goto yy54;
				goto yy46;
			}
		}
yy48:
		yych = *++YYCURSOR;
		goto yy23;
yy49:
		yyaccept = 1;
		YYMARKER = ++YYCURSOR;
		YYFILL(3);
		yych = *YYCURSOR;
		if (yybm[0+yych] & 8) {
			goto yy49;
		}
		if (yych == 'E') goto yy54;
		if (yych == 'e') goto yy54;
yy51:
		yyleng = YYCURSOR - yytext;
		{ return yoLexFloat(parser, parserNode); }
yy52:
		yyaccept = 0;
		YYMARKER = ++YYCURSOR;
		YYFILL(3);
		yych = *YYCURSOR;
		if (yych <= '9') {
			if (yych == '.') goto yy49;
			if (yych <= '/') goto yy46;
			goto yy52;
		} else {
			if (yych <= 'E') {
				if (yych <= 'D') goto yy46;
			} else {
				if (yych != 'e') goto yy46;
			}
		}
yy54:
		yych = *++YYCURSOR;
		if (yych <= ',') {
			if (yych == '+') goto yy56;
		} else {
			if (yych <= '-') goto yy56;
			if (yych <= '/') goto yy55;
			if (yych <= '9') goto yy57;
		}
yy55:
		YYCURSOR = YYMARKER;
		if (yyaccept <= 0) {
			goto yy46;
		} else {
			goto yy51;
		}
yy56:
		yych = *++YYCURSOR;
		if (yych <= '/') goto yy55;
		if (yych >= ':') goto yy55;
yy57:
		++YYCURSOR;
		YYFILL(1);
		yych = *YYCURSOR;
		if (yych <= '/') goto yy51;
		if (yych <= '9') goto yy57;
		goto yy51;
yy59:
		yych = *++YYCURSOR;
		if (yybm[0+yych] & 32) {
			goto yy64;
		}
		goto yy55;
yy60:
		yych = *++YYCURSOR;
		if (yybm[0+yych] & 16) {
			goto yy61;
		}
		goto yy55;
yy61:
		++YYCURSOR;
		YYFILL(1);
		yych = *YYCURSOR;
		if (yybm[0+yych] & 16) {
			goto yy61;
		}
		yyleng = YYCURSOR - yytext;
		{ return yoLexBin(parser, parserNode); }
yy64:
		++YYCURSOR;
		YYFILL(1);
		yych = *YYCURSOR;
		if (yybm[0+yych] & 32) {
			goto yy64;
		}
		yyleng = YYCURSOR - yytext;
		{ return yoLexHex(parser, parserNode); }
yy67:
		++YYCURSOR;
		YYFILL(1);
		yych = *YYCURSOR;
yy68:
		if (yybm[0+yych] & 64) {
			goto yy67;
		}
		goto yy35;
yy69:
		yych = *++YYCURSOR;
		if (yych == 'r') goto yy74;
		goto yy68;
yy70:
		yych = *++YYCURSOR;
		if (yych != 'i') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'd') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_VOID; }
yy74:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_VAR; }
yy76:
		yych = *++YYCURSOR;
		if (yych != 'l') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'l') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_NULL; }
yy80:
		yych = *++YYCURSOR;
		if (yych != 'u') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'e') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_TRUE; }
yy84:
		yych = *++YYCURSOR;
		if (yych != 'r') goto yy68;
		yych = *++YYCURSOR;
		if (yych == 'i') goto yy86;
		if (yych == 'u') goto yy87;
		goto yy68;
yy86:
		yych = *++YYCURSOR;
		if (yych == 'n') goto yy91;
		goto yy68;
yy87:
		yych = *++YYCURSOR;
		if (yych != 'c') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_STRUCT; }
yy91:
		yych = *++YYCURSOR;
		if (yych != 'g') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_STRING; }
yy94:
		yych = *++YYCURSOR;
		if (yych == 'l') goto yy105;
		goto yy68;
yy95:
		yych = *++YYCURSOR;
		if (yych != 'o') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'a') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		yych = *++YYCURSOR;
		if (yych == '3') goto yy99;
		if (yych == '6') goto yy100;
		goto yy68;
yy99:
		yych = *++YYCURSOR;
		if (yych == '2') goto yy103;
		goto yy68;
yy100:
		yych = *++YYCURSOR;
		if (yych != '4') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_FLOAT64; }
yy103:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_FLOAT32; }
yy105:
		yych = *++YYCURSOR;
		if (yych != 's') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'e') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_FALSE; }
yy109:
		yych = *++YYCURSOR;
		if (yych != 'n') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		yych = *++YYCURSOR;
		if (yych <= '5') {
			if (yych <= '1') {
				if (yych <= '0') goto yy68;
				goto yy114;
			} else {
				if (yych == '3') goto yy115;
				goto yy68;
			}
		} else {
			if (yych <= '8') {
				if (yych <= '6') goto yy116;
				if (yych <= '7') goto yy68;
			} else {
				if (yych == 'p') goto yy117;
				goto yy68;
			}
		}
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_UINT8; }
yy114:
		yych = *++YYCURSOR;
		if (yych == '6') goto yy125;
		goto yy68;
yy115:
		yych = *++YYCURSOR;
		if (yych == '2') goto yy123;
		goto yy68;
yy116:
		yych = *++YYCURSOR;
		if (yych == '4') goto yy121;
		goto yy68;
yy117:
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'r') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_UINTPTR; }
yy121:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_UINT64; }
yy123:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_UINT32; }
yy125:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_UINT16; }
yy127:
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		yych = *++YYCURSOR;
		switch (yych) {
		case '1':	goto yy129;
		case '3':	goto yy130;
		case '6':	goto yy131;
		case '8':	goto yy132;
		default:	goto yy68;
		}
yy129:
		yych = *++YYCURSOR;
		if (yych == '6') goto yy138;
		goto yy68;
yy130:
		yych = *++YYCURSOR;
		if (yych == '2') goto yy136;
		goto yy68;
yy131:
		yych = *++YYCURSOR;
		if (yych == '4') goto yy134;
		goto yy68;
yy132:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_INT8; }
yy134:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_INT64; }
yy136:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_INT32; }
yy138:
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_INT16; }
yy140:
		yych = *++YYCURSOR;
		if (yych == 'o') goto yy145;
		goto yy68;
yy141:
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 'e') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_INT8; }
yy145:
		yych = *++YYCURSOR;
		if (yych != 'l') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_BOOL; }
yy148:
		yych = *++YYCURSOR;
		if (yych == 'a') goto yy159;
		goto yy68;
yy149:
		yych = *++YYCURSOR;
		if (yych == 'a') goto yy155;
		goto yy68;
yy150:
		yych = *++YYCURSOR;
		if (yych != 'n') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 's') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 't') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_CONST; }
yy155:
		yych = *++YYCURSOR;
		if (yych != 's') goto yy68;
		yych = *++YYCURSOR;
		if (yych != 's') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_CLASS; }
yy159:
		yych = *++YYCURSOR;
		if (yych != 'r') goto yy68;
		++YYCURSOR;
		if (yybm[0+(yych = *YYCURSOR)] & 64) {
			goto yy67;
		}
		yyleng = YYCURSOR - yytext;
		{ return T_INT8; }
yy162:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_SLICE; }
yy164:
		yych = *++YYCURSOR;
		goto yy31;
yy165:
		++YYCURSOR;
		YYFILL(1);
		yych = *YYCURSOR;
yy166:
		if (yybm[0+yych] & 128) {
			goto yy165;
		}
		goto yy29;
yy167:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_GE; }
yy169:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_LE; }
yy171:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_NE; }
yy173:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_XORXOR; }
yy175:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_ANDAND; }
yy177:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_OROR; }
yy179:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_EQ; }
yy181:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_MOD_ASSIGN; }
yy183:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_DIV_ASSIGN; }
yy185:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '=') goto yy189;
		yyleng = YYCURSOR - yytext;
		{ return T_POW; }
yy187:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_MUL_ASSIGN; }
yy189:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_POW_ASSIGN; }
yy191:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_MINUS_ASSIGN; }
yy193:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_PLUS_ASSIGN; }
yy195:
		yyaccept = 1;
		YYMARKER = ++YYCURSOR;
		YYFILL(3);
		yych = *YYCURSOR;
		if (yych <= 'D') {
			if (yych <= '/') goto yy51;
			if (yych <= '9') goto yy195;
			goto yy51;
		} else {
			if (yych <= 'E') goto yy54;
			if (yych == 'e') goto yy54;
			goto yy51;
		}
yy197:
		++YYCURSOR;
		if ((yych = *YYCURSOR) == '.') goto yy201;
		if (yych == '=') goto yy199;
		yyleng = YYCURSOR - yytext;
		{ return T_CONCAT; }
yy199:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_CONCAT_ASSIGN; }
yy201:
		++YYCURSOR;
		yyleng = YYCURSOR - yytext;
		{ return T_ELLIPSIS; }
	}
}

}
